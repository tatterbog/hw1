template<typename T, typename U>
class Pair{
private:
    T elem1;
    U elem2;

public:
    Pair(const T& e1, const U& e2) : elem1(e1), elem2(e2) {}
    
    T first() const{
        return elem1;
    }
    
    U second() const{
        return elem2;
    }
    
    void print() const {
        std::cout << elem1 << ", " << elem2 << '\n';
    }
};


template<typename T>
class Pair<T, T>{
private:
    T elem1;
    T elem2;

public:
    Pair(const T& e1, const T& e2) : elem1(e1), elem2(e2) {}

    T first() const{
        return elem1;
    }
    
    T second() const{
        return elem2;
    }
    
    void print() const {
        std::cout << "Pair of identical types: " << elem1 << ", " << elem2 << '\n';
    }
};

int main() {
    Pair<int, int> p1(5, 6);
    Pair<char, double> p2('a', 12.3);
    Pair<std::string, std::string> p3("aerwa", "kjwao");
    
    p1.print();
    p2.print();
    p3.print();
}